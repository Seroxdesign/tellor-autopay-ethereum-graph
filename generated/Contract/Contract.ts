// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DataFeedFunded extends ethereum.Event {
  get params(): DataFeedFunded__Params {
    return new DataFeedFunded__Params(this);
  }
}

export class DataFeedFunded__Params {
  _event: DataFeedFunded;

  constructor(event: DataFeedFunded) {
    this._event = event;
  }

  get _queryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _feedId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewDataFeed extends ethereum.Event {
  get params(): NewDataFeed__Params {
    return new NewDataFeed__Params(this);
  }
}

export class NewDataFeed__Params {
  _event: NewDataFeed;

  constructor(event: NewDataFeed) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _queryId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _feedId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _queryData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class OneTimeTipClaimed extends ethereum.Event {
  get params(): OneTimeTipClaimed__Params {
    return new OneTimeTipClaimed__Params(this);
  }
}

export class OneTimeTipClaimed__Params {
  _event: OneTimeTipClaimed;

  constructor(event: OneTimeTipClaimed) {
    this._event = event;
  }

  get _queryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TipAdded extends ethereum.Event {
  get params(): TipAdded__Params {
    return new TipAdded__Params(this);
  }
}

export class TipAdded__Params {
  _event: TipAdded;

  constructor(event: TipAdded) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _queryId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _queryData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class TipClaimed extends ethereum.Event {
  get params(): TipClaimed__Params {
    return new TipClaimed__Params(this);
  }
}

export class TipClaimed__Params {
  _event: TipClaimed;

  constructor(event: TipClaimed) {
    this._event = event;
  }

  get _feedId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _queryId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Contract__getCurrentValueResult {
  value0: boolean;
  value1: Bytes;
  value2: BigInt;

  constructor(value0: boolean, value1: Bytes, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__getDataBeforeResult {
  value0: boolean;
  value1: Bytes;
  value2: BigInt;

  constructor(value0: boolean, value1: Bytes, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__getDataFeedResultValue0Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get reward(): BigInt {
    return this[1].toBigInt();
  }

  get balance(): BigInt {
    return this[2].toBigInt();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get interval(): BigInt {
    return this[4].toBigInt();
  }

  get window(): BigInt {
    return this[5].toBigInt();
  }
}

export class Contract__getIndexForDataBeforeResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__getPastTipByIndexResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }
}

export class Contract__getPastTipsResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }
}

export class Contract__tipsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentFeeds(_queryId: Bytes): Array<Bytes> {
    let result = super.call(
      "getCurrentFeeds",
      "getCurrentFeeds(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBytesArray();
  }

  try_getCurrentFeeds(_queryId: Bytes): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getCurrentFeeds",
      "getCurrentFeeds(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getCurrentTip(_queryId: Bytes, _token: Address): BigInt {
    let result = super.call(
      "getCurrentTip",
      "getCurrentTip(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentTip(
    _queryId: Bytes,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTip",
      "getCurrentTip(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentValue(_queryId: Bytes): Contract__getCurrentValueResult {
    let result = super.call(
      "getCurrentValue",
      "getCurrentValue(bytes32):(bool,bytes,uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return new Contract__getCurrentValueResult(
      result[0].toBoolean(),
      result[1].toBytes(),
      result[2].toBigInt()
    );
  }

  try_getCurrentValue(
    _queryId: Bytes
  ): ethereum.CallResult<Contract__getCurrentValueResult> {
    let result = super.tryCall(
      "getCurrentValue",
      "getCurrentValue(bytes32):(bool,bytes,uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getCurrentValueResult(
        value[0].toBoolean(),
        value[1].toBytes(),
        value[2].toBigInt()
      )
    );
  }

  getDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getDataBeforeResult {
    let result = super.call(
      "getDataBefore",
      "getDataBefore(bytes32,uint256):(bool,bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getDataBeforeResult(
      result[0].toBoolean(),
      result[1].toBytes(),
      result[2].toBigInt()
    );
  }

  try_getDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getDataBeforeResult> {
    let result = super.tryCall(
      "getDataBefore",
      "getDataBefore(bytes32,uint256):(bool,bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDataBeforeResult(
        value[0].toBoolean(),
        value[1].toBytes(),
        value[2].toBigInt()
      )
    );
  }

  getDataFeed(
    _feedId: Bytes,
    _queryId: Bytes
  ): Contract__getDataFeedResultValue0Struct {
    let result = super.call(
      "getDataFeed",
      "getDataFeed(bytes32,bytes32):((address,uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(_feedId),
        ethereum.Value.fromFixedBytes(_queryId)
      ]
    );

    return changetype<Contract__getDataFeedResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDataFeed(
    _feedId: Bytes,
    _queryId: Bytes
  ): ethereum.CallResult<Contract__getDataFeedResultValue0Struct> {
    let result = super.tryCall(
      "getDataFeed",
      "getDataFeed(bytes32,bytes32):((address,uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(_feedId),
        ethereum.Value.fromFixedBytes(_queryId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getDataFeedResultValue0Struct>(value[0].toTuple())
    );
  }

  getIndexForDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getIndexForDataBeforeResult {
    let result = super.call(
      "getIndexForDataBefore",
      "getIndexForDataBefore(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getIndexForDataBeforeResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getIndexForDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getIndexForDataBeforeResult> {
    let result = super.tryCall(
      "getIndexForDataBefore",
      "getIndexForDataBefore(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getIndexForDataBeforeResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getNewValueCountbyQueryId(_queryId: Bytes): BigInt {
    let result = super.call(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBigInt();
  }

  try_getNewValueCountbyQueryId(_queryId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastTipByIndex(
    _queryId: Bytes,
    _token: Address,
    _index: BigInt
  ): Contract__getPastTipByIndexResultValue0Struct {
    let result = super.call(
      "getPastTipByIndex",
      "getPastTipByIndex(bytes32,address,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return changetype<Contract__getPastTipByIndexResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPastTipByIndex(
    _queryId: Bytes,
    _token: Address,
    _index: BigInt
  ): ethereum.CallResult<Contract__getPastTipByIndexResultValue0Struct> {
    let result = super.tryCall(
      "getPastTipByIndex",
      "getPastTipByIndex(bytes32,address,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getPastTipByIndexResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPastTipCount(_queryId: Bytes, _token: Address): BigInt {
    let result = super.call(
      "getPastTipCount",
      "getPastTipCount(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPastTipCount(
    _queryId: Bytes,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastTipCount",
      "getPastTipCount(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastTips(
    _queryId: Bytes,
    _token: Address
  ): Array<Contract__getPastTipsResultValue0Struct> {
    let result = super.call(
      "getPastTips",
      "getPastTips(bytes32,address):((uint256,uint256)[])",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toTupleArray<Contract__getPastTipsResultValue0Struct>();
  }

  try_getPastTips(
    _queryId: Bytes,
    _token: Address
  ): ethereum.CallResult<Array<Contract__getPastTipsResultValue0Struct>> {
    let result = super.tryCall(
      "getPastTips",
      "getPastTips(bytes32,address):((uint256,uint256)[])",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getPastTipsResultValue0Struct>()
    );
  }

  getRewardClaimedStatus(
    _feedId: Bytes,
    _queryId: Bytes,
    _timestamp: BigInt
  ): boolean {
    let result = super.call(
      "getRewardClaimedStatus",
      "getRewardClaimedStatus(bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_feedId),
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_getRewardClaimedStatus(
    _feedId: Bytes,
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getRewardClaimedStatus",
      "getRewardClaimedStatus(bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_feedId),
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTimestampbyQueryIdandIndex(_queryId: Bytes, _index: BigInt): BigInt {
    let result = super.call(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampbyQueryIdandIndex(
    _queryId: Bytes,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isInDispute(_queryId: Bytes, _timestamp: BigInt): boolean {
    let result = super.call(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_isInDispute(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  master(): Address {
    let result = super.call("master", "master():(address)", []);

    return result[0].toAddress();
  }

  try_master(): ethereum.CallResult<Address> {
    let result = super.tryCall("master", "master():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  retrieveData(_queryId: Bytes, _timestamp: BigInt): Bytes {
    let result = super.call(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBytes();
  }

  try_retrieveData(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tellor(): Address {
    let result = super.call("tellor", "tellor():(address)", []);

    return result[0].toAddress();
  }

  try_tellor(): ethereum.CallResult<Address> {
    let result = super.tryCall("tellor", "tellor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tips(param0: Bytes, param1: Address, param2: BigInt): Contract__tipsResult {
    let result = super.call(
      "tips",
      "tips(bytes32,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new Contract__tipsResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_tips(
    param0: Bytes,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Contract__tipsResult> {
    let result = super.tryCall(
      "tips",
      "tips(bytes32,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__tipsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tellor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimOneTimeTipCall extends ethereum.Call {
  get inputs(): ClaimOneTimeTipCall__Inputs {
    return new ClaimOneTimeTipCall__Inputs(this);
  }

  get outputs(): ClaimOneTimeTipCall__Outputs {
    return new ClaimOneTimeTipCall__Outputs(this);
  }
}

export class ClaimOneTimeTipCall__Inputs {
  _call: ClaimOneTimeTipCall;

  constructor(call: ClaimOneTimeTipCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _queryId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _timestamps(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class ClaimOneTimeTipCall__Outputs {
  _call: ClaimOneTimeTipCall;

  constructor(call: ClaimOneTimeTipCall) {
    this._call = call;
  }
}

export class ClaimTipCall extends ethereum.Call {
  get inputs(): ClaimTipCall__Inputs {
    return new ClaimTipCall__Inputs(this);
  }

  get outputs(): ClaimTipCall__Outputs {
    return new ClaimTipCall__Outputs(this);
  }
}

export class ClaimTipCall__Inputs {
  _call: ClaimTipCall;

  constructor(call: ClaimTipCall) {
    this._call = call;
  }

  get _reporter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feedId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _queryId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _timestamps(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ClaimTipCall__Outputs {
  _call: ClaimTipCall;

  constructor(call: ClaimTipCall) {
    this._call = call;
  }
}

export class FundFeedCall extends ethereum.Call {
  get inputs(): FundFeedCall__Inputs {
    return new FundFeedCall__Inputs(this);
  }

  get outputs(): FundFeedCall__Outputs {
    return new FundFeedCall__Outputs(this);
  }
}

export class FundFeedCall__Inputs {
  _call: FundFeedCall;

  constructor(call: FundFeedCall) {
    this._call = call;
  }

  get _feedId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _queryId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FundFeedCall__Outputs {
  _call: FundFeedCall;

  constructor(call: FundFeedCall) {
    this._call = call;
  }
}

export class SetupDataFeedCall extends ethereum.Call {
  get inputs(): SetupDataFeedCall__Inputs {
    return new SetupDataFeedCall__Inputs(this);
  }

  get outputs(): SetupDataFeedCall__Outputs {
    return new SetupDataFeedCall__Outputs(this);
  }
}

export class SetupDataFeedCall__Inputs {
  _call: SetupDataFeedCall;

  constructor(call: SetupDataFeedCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _queryId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _reward(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _interval(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _window(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _queryData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class SetupDataFeedCall__Outputs {
  _call: SetupDataFeedCall;

  constructor(call: SetupDataFeedCall) {
    this._call = call;
  }
}

export class TipCall extends ethereum.Call {
  get inputs(): TipCall__Inputs {
    return new TipCall__Inputs(this);
  }

  get outputs(): TipCall__Outputs {
    return new TipCall__Outputs(this);
  }
}

export class TipCall__Inputs {
  _call: TipCall;

  constructor(call: TipCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _queryId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _queryData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TipCall__Outputs {
  _call: TipCall;

  constructor(call: TipCall) {
    this._call = call;
  }
}
